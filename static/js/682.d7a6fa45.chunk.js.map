{"version":3,"file":"static/js/682.d7a6fa45.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: \"434px\", objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp =() => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (\r\n        url, \r\n        method = 'GET', \r\n        body = null, \r\n        headers = {'Content-Type': 'application/json'}) => {\r\n\r\n            setLoading(true);\r\n\r\n            try {\r\n                const response = await fetch(url, {method, body, headers});\r\n\r\n                if(!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, \r\n                    status: ${response.status}`)\r\n                }\r\n\r\n                const data = await response.json();\r\n\r\n                setLoading(false);\r\n                return data;\r\n            } catch(e) {\r\n                setLoading(false);\r\n                setError(e.message);\r\n                throw e;\r\n            }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const   _apiBase = 'https://gateway.marvel.com:443/v1/public/',\r\n            _apiKey = 'apikey=e251c56562ab3f7896538d11f46d6633',\r\n            _baseOffset = 250,\r\n            _baseLimit = 9;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=${_baseLimit}&offset=${offset}&${_apiKey}`);        \r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);        \r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComics = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name ? `${char.name.slice(0, 50)}` : 'Noname',\r\n            description: char.description ? `${char.description.slice(0, 200)}...` : 'There is no description for this character, at the request of the FBI representatives',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension, \r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} pages`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t}\r\n\t}\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComics}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","objectFit","margin","img","ComicsList","comicsList","setComicsList","useState","newItemLoading","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","decoration","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","slice","description","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getCharacterByName","getComics"],"sourceRoot":""}