{"version":3,"file":"static/js/156.70ac23b4.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: \"434px\", objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst SinglePage = ({Component, dataType}) => {\n        const {id} = useParams();\n        const [data, setData] = useState(null);\n        const {loading, error, getComics, getCharacter, clearError} = useMarvelService();\n\n        useEffect(() => {\n            updateData()\n        }, [id])\n\n        const updateData = () => {\n            clearError();\n\n            switch (dataType) {\n                case 'comics':\n                    getComics(id).then(onDataLoaded);\n                    break;\n                case 'character':\n                    getCharacter(id).then(onDataLoaded);\n            }\n        }\n\n        const onDataLoaded = (data) => {\n            setData(data);\n        }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !data) ? <Component data={data}/> : null;\n\n        return (\n            <>\n                <AppBanner/>\n                {errorMessage}\n                {spinner}\n                {content}\n            </>\n        )\n}\n\nexport default SinglePage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp =() => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (\r\n        url, \r\n        method = 'GET', \r\n        body = null, \r\n        headers = {'Content-Type': 'application/json'}) => {\r\n\r\n            setLoading(true);\r\n\r\n            try {\r\n                const response = await fetch(url, {method, body, headers});\r\n\r\n                if(!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, \r\n                    status: ${response.status}`)\r\n                }\r\n\r\n                const data = await response.json();\r\n\r\n                setLoading(false);\r\n                return data;\r\n            } catch(e) {\r\n                setLoading(false);\r\n                setError(e.message);\r\n                throw e;\r\n            }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const   _apiBase = 'https://gateway.marvel.com:443/v1/public/',\r\n            _apiKey = 'apikey=e251c56562ab3f7896538d11f46d6633',\r\n            _baseOffset = 250,\r\n            _baseLimit = 9;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=${_baseLimit}&offset=${offset}&${_apiKey}`);        \r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);        \r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComics = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name ? `${char.name.slice(0, 50)}` : 'Noname',\r\n            description: char.description ? `${char.description.slice(0, 200)}...` : 'There is no description for this character, at the request of the FBI representatives',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension, \r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} pages`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t}\r\n\t}\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComics}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","loading","error","getComics","getCharacter","clearError","useMarvelService","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","slice","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","res","getCharacterByName","getAllComics"],"sourceRoot":""}